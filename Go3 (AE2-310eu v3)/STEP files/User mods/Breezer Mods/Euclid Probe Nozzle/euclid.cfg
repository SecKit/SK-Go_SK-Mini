

[gcode_macro EuclidProbe]
description: config vars for Euclid probe deploy/stow

## @TODO Replace the coordinates to suit your printer
variable_position_preflight: [ 250, 250 ] # position for probe to have clear path to dock
variable_position_side:      [ 275, 299] # position for probe near dock to swipe on/off
variable_position_dock:      [ 293, 299] # dock position
## @TODO if your printer has a fixed Z-Endstop that you will use define it here
## @TODO for example Voron Trident
variable_position_zstop:      [ 150,250 ] # zstop position

## exit/re-entry staging
variable_position_exit:      [ 293 , 250 ] # exit position

## clearance between the toolhead and bed when traveling to pick up the probe
variable_bed_clearance: 15

## probe dock height
## @TODO If the toolhead can move vertically in relation to the probe dock
## @TODO height(such as attached to the be on a moving-gantry printer like a
## @TODO Voron 2.4), set this to the Z position of the probe dock.
# variable_dock_height: 15

## move speeds in mm/min
variable_move_speeds: 10000

## internal state variables; not for configuration!
variable_batch_mode_enabled: False
variable_probe_state: None

gcode:
    RESPOND TYPE=command MSG="{ printer['gcode_macro EuclidProbe'] }"


# @TODO The homing override is machine specific.  This example is for a
# @TODO fixed-gantry/moving-bed printer such as the Rat Rig V-Core 3.  Ensure you
# @TODO only have [homing_override] defined in one place in your Klipper config
# @TODO (typically here or in printer.cfg).  It's particularly important to make
# @TODO sure the probe is picked up before attempting to home the Z axis.
[homing_override]
axes: z
set_position_z: -5
gcode:
    {% set euclid_probe = printer["gcode_macro EuclidProbe"] %}

    # @TODO Remove this comment and the following once you've verified that the
    # @TODO probe can be deployed without the bed, dock, or toolhead colliding.
    #M112

    G90

    # force the bed and toolhead apart
    SET_KINEMATIC_POSITION Z=0
    G0 Z{ euclid_probe.bed_clearance } F500

    # home Y and X, Y first to avoid running into the dock
    {% if "y" not in (printer.toolhead.homed_axes | lower) %}
        G28 Y
    {% endif %}

    {% if "x" not in (printer.toolhead.homed_axes | lower) %}
        G28 X
    {% endif %}

    ## @TODO If you are using Euclid to function as a Z-Endstop, then you need to deploy it.
    ## @TODO If you are using a fixed Z-stop, then comment out the next line
    DEPLOY_PROBE

    # @ TODO  home Z at bed center with Euclid Probe
    G0 X{ printer.toolhead.axis_maximum.x/2 } Y{ printer.toolhead.axis_maximum.y/2 } F{ euclid_probe.move_speeds }
    G28 Z



    # after 'G28 Z' the probe stays in contact with the bed; move it away bed_clearance height.
    G0 Z{euclid_probe.bed_clearance} F500

    ## @TODO If you are using Euclid to function as a Z-Endstop, then you need to stow  it.
    ## @TODO If you are using a fixed Z-stop, then comment out the next line
    STOW_PROBE

    # @TODO move back to center of bed
    G0 X{ printer.toolhead.axis_maximum.x/2 } Y{ printer.toolhead.axis_maximum.y/2 } F{ euclid_probe.move_speeds }



[gcode_macro _ASSERT_PROBE_STATE]
description: ensures probe is in a known state; QUERY_PROBE must have been called before this macro!
gcode:
    ## QUERY_PROBE manually-verified results, when microswitch not depressed
    ## "TRIGGERED" -> 1 :: probe stowed
    ## "open"      -> 0 :: probe deployed
    {% set last_query_state = "stowed" if printer.probe.last_query == 1 else "deployed" %}

    {% if params.MUST_BE != last_query_state %}
        { action_raise_error("expected probe state to be {} but is {} ({})".format(params.MUST_BE, last_query_state, printer.probe.last_query)) }
    {% else %}
        ## all good; update state
        SET_GCODE_VARIABLE MACRO=EuclidProbe VARIABLE=probe_state VALUE="'{ last_query_state }'"
    {% endif %}


[gcode_macro ASSERT_PROBE_DEPLOYED]
description: error if probe not deployed
gcode:
    # wait for moves to finish, then pause 0.25s for detection
    M400
    G4 P250

    QUERY_PROBE
    _ASSERT_PROBE_STATE MUST_BE=deployed


[gcode_macro ASSERT_PROBE_STOWED]
description: error if probe not stowed
gcode:
    # wait for moves to finish, then pause 0.25s for detection
    M400
    G4 P250

    QUERY_PROBE
    _ASSERT_PROBE_STATE MUST_BE=stowed


[gcode_macro EUCLID_PROBE_BEGIN_BATCH]
description: begin euclid probe batch mode
gcode:
    SET_GCODE_VARIABLE MACRO=EuclidProbe VARIABLE=batch_mode_enabled VALUE=True
    RESPOND TYPE=command MSG="Probe batch mode enabled"


[gcode_macro EUCLID_PROBE_END_BATCH]
description: end euclid probe batch mode and stow probe
gcode:
    SET_GCODE_VARIABLE MACRO=EuclidProbe VARIABLE=batch_mode_enabled VALUE=False
    RESPOND TYPE=command MSG="Probe batch mode disabled"
    STOW_PROBE


[gcode_macro DEPLOY_PROBE]
description: deploy Euclid probe
gcode:
    {% set euclid_probe = printer["gcode_macro EuclidProbe"] %}

    {% if euclid_probe.batch_mode_enabled and euclid_probe.probe_state == "deployed" %}
        RESPOND TYPE=command MSG="Probe batch mode enabled: already deployed"
    {% else %}
        RESPOND TYPE=command MSG="Deploying probe"

        # ensure the probe is currently stowed; can't deploy what isn't stowed.
        ASSERT_PROBE_STOWED

        G90

        # set approach elevation to clear probe over bed on fixed gantry machine
        G0 Z{ euclid_probe.bed_clearance } F500

        # move the toolhead to safe position to start probe pickup
        G0 X{ euclid_probe.position_preflight[0] } Y{ euclid_probe.position_preflight[1] } F{ euclid_probe.move_speeds }

        #  move to the side of the dock
        G0 X{ euclid_probe.position_side[0] } Y{ euclid_probe.position_side[1] } F{ euclid_probe.move_speeds }

        # @TODO fixed bed dock and moving gantry printers need to add a move
        # @TODO command here to lower the gantry to dock height
        # G0 Z {euclid_probe.dock_height} F500

        # wait 1/4 second
        M400
        G4 P250

        #  move sideways over the dock to pick up probe
        G0 X{ euclid_probe.position_dock[0] } Y{ euclid_probe.position_dock[1] } F1500

        #pause while manually attatching probe
        #G4 P5000

        # confirm deploy was successful
        ASSERT_PROBE_DEPLOYED

        # move out of the dock in a straight line
        G0 X{ euclid_probe.position_exit[0] } Y{ euclid_probe.position_exit[1] } F{ euclid_probe.move_speeds }
    {% endif %}


[gcode_macro STOW_PROBE]
description: stow Euclid probe
gcode:
    {% set euclid_probe = printer["gcode_macro EuclidProbe"] %}

    {% if euclid_probe.batch_mode_enabled %}
        RESPOND TYPE=command MSG="Probe batch mode enabled: not stowing"
    {% else %}
        RESPOND TYPE=command MSG="Stowing probe"

        # ensure the probe is currently deployed; can't stow what isn't deployed.
        ASSERT_PROBE_DEPLOYED

        G90

        # set approach elevation for fixed gantry system to clear probe over bed
        G0 Z{ euclid_probe.bed_clearance } F3000

        # @TODO fixed bed dock and moving gantry printers need to add a move
        # @TODO command here to lower the gantry to dock height
        # G0 Z{euclid_probe.dock_height} F500

        # move to the exit/re-entry staging position
        G0 X{ euclid_probe.position_exit[0] } Y{ euclid_probe.position_exit[1] } F{ euclid_probe.move_speeds }

        # slowly move into dock
        G0 X{ euclid_probe.position_dock[0] } Y{ euclid_probe.position_dock[1] } F3000

        # wait for moves to finish, pause to force 90deg travel swipe
        M400
        G4 P250

        #Added time for maual remove of probe
        #G4 P5000

        # quick swipe off
        G0 X{ euclid_probe.position_side[0] } Y{ euclid_probe.position_side[1] } F{ euclid_probe.move_speeds }

        # @TODO move back to center of bed
        G0 X{ printer.toolhead.axis_maximum.x/2 } Y{ printer.toolhead.axis_maximum.y/2 } F{ euclid_probe.move_speeds }
        
        # confirm stowing was successful
        ASSERT_PROBE_STOWED
    {% endif %}


## Simple example macro to perform a bed mesh calibration by wrapping it in
## DEPLOY_PROBE/STOW_PROBE macros.
## For a more complex example that probes the area that will be printed, see
## https://github.com/blalor/vcore3-ratos-config/blob/50e757ec32e085bedb3b9fa317581f9aa1913dd2/euclid.cfg#L230-L305
#[gcode_macro BED_MESH_CALIBRATE]
#rename_existing: BED_MESH_CALIBRATE_ORIG
#gcode:
#    DEPLOY_PROBE
#    BED_MESH_CALIBRATE_ORIG
#    STOW_PROBE


## @TODO uncomment one of the following macros if necessary for your printer:
## * Z_TILT_ADJUST is for [z_tilt] config
## * QUAD_GANTRY_LEVEL is for [quad_gantry_level] config
#[gcode_macro Z_TILT_ADJUST]

[gcode_macro Z_TILT_ADJUST]
#description: modified Z_TILT_ADJUST, wrapped with DEPLOY_PROBE/STOW_PROBE
rename_existing: Z_TILT_ADJUST_ORIG
gcode:
    DEPLOY_PROBE
    Z_TILT_ADJUST_ORIG
    STOW_PROBE


## @TODO ensure sufficient distance specified for horizontal_move_z in [quad_gantry_level]
# [gcode_macro QUAD_GANTRY_LEVEL]
# description: modified QUAD_GANTRY_LEVEL, wrapped with DEPLOY_PROBE/STOW_PROBE
# rename_existing: QUAD_GANTRY_LEVEL_ORIGINIAL
# gcode:
#     DEPLOY_PROBE
#     QUAD_GANTRY_LEVEL_ORIGINIAL
#     STOW_PROBE


[gcode_macro PROBE_CALIBRATE]
rename_existing: PROBE_CALIBRATE_ORIG
gcode:
    {% set euclid_probe = printer["gcode_macro EuclidProbe"] %}
    DEPLOY_PROBE

    G90
    G0 X{ printer.toolhead.axis_maximum.x/2 } Y{ printer.toolhead.axis_maximum.y/2 } F{ euclid_probe.move_speeds }

    M117 Beginning probe calibration; remove probe before measuring nozzle height!
    PROBE_CALIBRATE_ORIG


#[gcode_macro PRIME_LINE]
#gcode:
#    G1 X0 Y0 Z0.5 F7200 ; move to start
#    G1 E1 F800
#    G1 X0 Y150 E7.4835 F1800 ; print line
#    G1 X0.2 Y150 F7200 ; move to start
#    G1 X.2 Y0 E7.4835 F1800 ; print line
#    G1 E-0.4 F1800 ; retract

[gcode_macro PRIME_LINE]
gcode:
    G1 X0 Y0 z0.5 F6000          ; Move nozzle to the starting location
    G1 E10 F600             ; Extrude 10mm of filament to prime the nozzle
    G1 Y150 F6000           ; Move to Y150 while extruding, forming the first line
    G1 X0.2 F6000           ; Move to X0.2 while still at Y150
    G1 E20 F600             ; Extrude another 10mm of filament for the second line
    G1 Y0 F6000             ; Move back to Y0 while extruding, forming the second line
    G1 X0 Y0 F6000          ; Return to the starting X and Y positions
    G1 E-0.4 F1800          ; retract


# call from slicer printer start gcode; for example, with PrusaSlicer:
#   START_PRINT EXTRUDER_TEMP=[first_layer_temperature] BED_TEMP=[first_layer_bed_temperature] FILAMENT_TYPE=[filament_type]
[gcode_macro START_PRINT]
gcode:
    {% set extruder_temp = params.EXTRUDER_TEMP | default(printer.extruder.target, true) %}
    {% set bed_temp      = params.BED_TEMP      | default(printer.heater_bed.target, true) %}

    #Pre warm extruder
    M104 S150
    
    # Wait for bed to heat up
    M140 S{bed_temp}
    M117 Heating bed...
    M190 S{bed_temp}

    ## reset various states to configured or safe defaults
    CLEAR_PAUSE

    # Reset speed and extrusion rates, in case they were manually changed
    M220 S100
    M221 S100

    # Metric values
    G21

    # Absolute positioning
    G90

    # Set extruder to absolute mode
    M82

    EUCLID_PROBE_BEGIN_BATCH

    # Home
    G28


    # @TODO enable bed tilt adjustment if necessary for your printer.
    # * Z_TILT_ADJUST is for [z_tilt] config
    # * QUAD_GANTRY_LEVEL is for [quad_gantry_level] config

     M117 Adjusting for tilt...
     Z_TILT_ADJUST

    # M117 Performing gantry leveling...
    # QUAD_GANTRY_LEVEL

    # Home again as Z will have changed after adjustment and bed heating.
    M117 Rehoming after leveling...
    G28 Z

    BED_MESH_CLEAR
    BED_MESH_CALIBRATE
    BED_MESH_PROFILE LOAD=default
    
    EUCLID_PROBE_END_BATCH

    # Wait for extruder to heat up
    M104 S{extruder_temp}
    M117 Heating extruder...
    G1 X0 Y300 F7200
    M109 S{extruder_temp}
    G92 E0
    
    LINE_PURGE

    M117 Printing...

    M83
    G92 E0